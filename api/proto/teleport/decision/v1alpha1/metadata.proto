// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.decision.v1alpha1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/decision/v1alpha1;decisionv1alpha1";

// Metadata common for authorization decision request operations.
message RequestMetadata {
  // FeatureAssertions is a list of DecisionFeature that the PDP *must* implement in order to correctly
  // evaluate the decision request. Note that changes that require new features in the PDP in order for
  // it to understand a decision request are rare and should be avoided if possible.
  repeated DecisionFeature feature_assertions = 1;

  // PepVersionHint is the *likely* version of the PEP that will enforce the decision. Not all decision
  // requests can guarantee that the expected PEP version will actually be the version that ends up enforcing
  // the decision. Hard compatibility requirements must be enforced via feature assertions so that PEPs can
  // correctly reject decisions that they cannot enforce.
  string pep_version_hint = 2;
}

// Metadata common for access permits.
message PermitMetadata {
  // FeatureAssertions is a list of EnforcementFeature that the PEP *must* implement in order to correctly
  // enforce the decision. Note that where possible new features should be structured to "fail safe" rather
  // than relying on feature assertions.
  repeated EnforcementFeature feature_assertions = 1;

  // PdpVersion is the version of the PDP that evaluated the decision request.
  string pdp_version = 2;
}

// Metadata common for access denials.
message DenialMetadata {
  // FeatureAssertions is a list of EnforcementFeature that the PEP *must* implement in order to correctly
  // enforce the decision. Note that denials rarely need feature assertions since they typically "fail safe"
  // anyway.
  repeated EnforcementFeature feature_assertions = 1;

  // PdpVersion is the version of the PDP that evaluated the decision request.
  string pdp_version = 2;

  // UserMessage is a sanitized message safe for return to the subject identity of the decision request.
  string user_message = 3;
}

// DecisionFeature is an enum representing PDP features.
enum DecisionFeature {
  // DECISION_FEATURE_UNSPECIFIED is the default/unspecified value for DecisionFeature. Asserting this feature has no effect.
  DECISION_FEATURE_UNSPECIFIED = 0;
}

// EnforcementFeature is the enum representing PEP features.
enum EnforcementFeature {
  // ENFORCEMENT_FEATURE_UNSPECIFIED is the default/unspecified value for EnforcementFeature. Asserting this feature has no effect.
  ENFORCEMENT_FEATURE_UNSPECIFIED = 0;
}
