// Copyright 2024 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.workloadidentity.v1;

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/workloadidentity/v1;workloadidentityv1pb";

// The collection of attributes that result from the join process.
message JoinAttrs {
  // The collection of attributes that result from the join process but are not
  // specific to any particular join method.
  JoinAttrsMeta meta = 1;
  // Attributes that are specific to the GitLab (`gitlab`) join method.
  JoinAttrsGitLab gitlab = 2;
  // Attributes that are specific to the GitHub (`github`) join method.
  JoinAttrsGitHub github = 3;
  // Attributes that are specific to the AWS IAM (`iam`) join method.
  JoinAttrsAWSIAM iam = 4;
  // Attributes that are specific to the TPM (`tpm`) join method.
  JoinAttrsTPM tpm = 5;
  JoinAttrsAzure azure = 6;
}

// The collection of attributes that result from the join process but are not
// specific to any particular join method.
message JoinAttrsMeta {
  // The name of the join token that was used to join.
  //
  // This field is omitted if the join token that was used to join was of the
  // `token` method as in this case, the name of the join token is sensitive.
  //
  // Example: `my-gitlab-join-token`
  string join_token_name = 1;
  // The name of the join method that was used to join.
  //
  // Example: `gitlab`
  string join_method = 2;
}

// Attributes that are specific to the GitLab join method.
//
// Typically, these are mapped directly from the claims of the GitLab JWT that
// was used to join. You can view the documentation for those claims at:
// https://docs.gitlab.com/ee/ci/secrets/id_token_authentication.html#token-payload
message JoinAttrsGitLab {
  // The `sub` claim of the GitLab JWT that was used to join.
  // For example: `project_path:mygroup/my-project:ref_type:branch:ref:main`
  string sub = 1;
  // The ref that the pipeline is running against.
  // For example: `main`
  string ref = 2;
  // The type of ref that the pipeline is running against.
  // This is typically `branch` or `tag`.
  string ref_type = 3;
  // Whether or not the ref that the pipeline is running against is protected.
  bool ref_protected = 4;
  // The path of the namespace of the project that the pipeline is running within.
  // For example: `mygroup`
  string namespace_path = 5;
  // The full qualified path of the project that the pipeline is running within.
  // This includes the namespace path.
  // For example: `mygroup/my-project`
  string project_path = 6;
  // The name of the user that triggered the pipeline run.
  string user_login = 7;
  // The email of the user that triggered the pipeline run.
  string user_email = 8;
  // The ID of the pipeline.
  string pipeline_id = 9;
  // The source of the pipeline.
  // For example: `push` or `web`
  string pipeline_source = 10;
  // The environment the pipeline is running against, if any.
  string environment = 11;
  // Whether or not the pipeline is running against a protected environment.
  // If there is no configured environment, this field is false.
  bool environment_protected = 12;
  // The ID of the runner that this pipeline is running on.
  int64 runner_id = 13;
  // The type of runner that is processing the pipeline.
  // Either `gitlab-hosted` or `self-hosted`.
  string runner_environment = 14;
  // The SHA of the commit that triggered the pipeline run.
  string sha = 15;
  // The ref URI of the CI config configuring the pipeline.
  string ci_config_ref_uri = 16;
  // The Git SHA of the CI config ref configuring the pipeline.
  string ci_config_sha = 17;
}

// Attributes that are specific to the GitHub (`github`) join method.
//
// Typically, these are mapped directly from the claims of the GitHub JWT that
// was used to join. You can view the documentation for those claims at:
// https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token
message JoinAttrsGitHub {
  // The `sub` claim of the GitHub JWT that was used to join.
  string sub = 1;
  // The username of the actor that initiated the workflow run.
  string actor = 2;
  // The name of the environment that the workflow is running against, if any.
  string environment = 3;
  // The ref that the workflow is running against.
  string ref = 4;
  // The type of ref that the workflow is running against.
  // For example, `branch`.
  string ref_type = 5;
  // The name of the repository that the workflow is running within.
  string repository = 6;
  // The name of the owner of the repository that the workflow is running within.
  string repository_owner = 7;
  // The name of the workflow that is running.
  string workflow = 8;
  // The name of the event that triggered the workflow run.
  string event_name = 9;
  // The SHA of the commit that triggered the workflow run.
  string sha = 10;
  // The ID of this GitHub actions workflow run.
  string run_id = 11;
}

// Attributes that are specific to the AWS IAM (`iam`) join method.
//
// Typically, these are mapped directly from the results of the
// STS GetCallerIdentity call that is made as part of the join process.
message JoinAttrsAWSIAM {
  // The identifier of the account that the joining entity is a part of.
  // For example: `123456789012`
  string account = 1;
  // The AWS ARN of the joining entity.
  // For example: `arn:aws:sts::123456789012:assumed-role/my-role-name/my-role-session-name`
  string arn = 2;
}

// Attributes that are specific to the TPM (`tpm`) join method.
message JoinAttrsTPM {
  // The SHA256 hash of the PKIX formatted EK public key, encoded in hex.
  // This effectively identifies a specific TPM.
  string ek_pub_hash = 1;
  // The serial number of the EK certificate, if present.
  string ek_cert_serial = 2;
  // Whether or not the EK certificate was verified against a certificate
  // authority.
  bool ek_cert_verified = 3;
}

// Attributes that are specific to the Azure (`azure`) join method.
message JoinAttrsAzure {
  // The subscription ID of the Azure account that the joining entity is a part of.
  string subscription = 1;
  // The resource group of the Azure account that the joining entity is a part of.
  string resource_group = 2;
}
